use evdev::{AttributeSet, Key};
use evdev::uinput::{VirtualDevice, VirtualDeviceBuilder};
use main_error::MainError;

pub fn char_to_key(c: char) -> Result<(Key, bool), MainError> {
    match c {
        '0' => Ok((Key::KEY_0, false)),
        '1' => Ok((Key::KEY_1, false)),
        '2' => Ok((Key::KEY_2, false)),
        '3' => Ok((Key::KEY_3, false)),
        '4' => Ok((Key::KEY_4, false)),
        '5' => Ok((Key::KEY_5, false)),
        '6' => Ok((Key::KEY_6, false)),
        '7' => Ok((Key::KEY_7, false)),
        '8' => Ok((Key::KEY_8, false)),
        '9' => Ok((Key::KEY_9, false)),
        ')' => Ok((Key::KEY_0, true)),
        '!' => Ok((Key::KEY_1, true)),
        '@' => Ok((Key::KEY_2, true)),
        '#' => Ok((Key::KEY_3, true)),
        '$' => Ok((Key::KEY_4, true)),
        '%' => Ok((Key::KEY_5, true)),
        '^' => Ok((Key::KEY_6, true)),
        '&' => Ok((Key::KEY_7, true)),
        '*' => Ok((Key::KEY_8, true)),
        '(' => Ok((Key::KEY_9, true)),
        'A' => Ok((Key::KEY_A, true)),
        'B' => Ok((Key::KEY_B, true)),
        'C' => Ok((Key::KEY_C, true)),
        'D' => Ok((Key::KEY_D, true)),
        'E' => Ok((Key::KEY_E, true)),
        'F' => Ok((Key::KEY_F, true)),
        'G' => Ok((Key::KEY_G, true)),
        'H' => Ok((Key::KEY_H, true)),
        'I' => Ok((Key::KEY_I, true)),
        'J' => Ok((Key::KEY_J, true)),
        'K' => Ok((Key::KEY_K, true)),
        'L' => Ok((Key::KEY_L, true)),
        'M' => Ok((Key::KEY_M, true)),
        'N' => Ok((Key::KEY_N, true)),
        'O' => Ok((Key::KEY_O, true)),
        'P' => Ok((Key::KEY_P, true)),
        'Q' => Ok((Key::KEY_Q, true)),
        'R' => Ok((Key::KEY_R, true)),
        'S' => Ok((Key::KEY_S, true)),
        'T' => Ok((Key::KEY_T, true)),
        'U' => Ok((Key::KEY_U, true)),
        'V' => Ok((Key::KEY_V, true)),
        'W' => Ok((Key::KEY_W, true)),
        'X' => Ok((Key::KEY_X, true)),
        'Y' => Ok((Key::KEY_Y, true)),
        'Z' => Ok((Key::KEY_Z, true)),
        'a' => Ok((Key::KEY_A, false)),
        'b' => Ok((Key::KEY_B, false)),
        'c' => Ok((Key::KEY_C, false)),
        'd' => Ok((Key::KEY_D, false)),
        'e' => Ok((Key::KEY_E, false)),
        'f' => Ok((Key::KEY_F, false)),
        'g' => Ok((Key::KEY_G, false)),
        'h' => Ok((Key::KEY_H, false)),
        'i' => Ok((Key::KEY_I, false)),
        'j' => Ok((Key::KEY_J, false)),
        'k' => Ok((Key::KEY_K, false)),
        'l' => Ok((Key::KEY_L, false)),
        'm' => Ok((Key::KEY_M, false)),
        'n' => Ok((Key::KEY_N, false)),
        'o' => Ok((Key::KEY_O, false)),
        'p' => Ok((Key::KEY_P, false)),
        'q' => Ok((Key::KEY_Q, false)),
        'r' => Ok((Key::KEY_R, false)),
        's' => Ok((Key::KEY_S, false)),
        't' => Ok((Key::KEY_T, false)),
        'u' => Ok((Key::KEY_U, false)),
        'v' => Ok((Key::KEY_V, false)),
        'w' => Ok((Key::KEY_W, false)),
        'x' => Ok((Key::KEY_X, false)),
        'y' => Ok((Key::KEY_Y, false)),
        'z' => Ok((Key::KEY_Z, false)),
        '-' => Ok((Key::KEY_MINUS, false)),
        '_' => Ok((Key::KEY_MINUS, true)),
        '=' => Ok((Key::KEY_EQUAL, false)),
        '+' => Ok((Key::KEY_EQUAL, true)),
        ',' => Ok((Key::KEY_COMMA, false)),
        '<' => Ok((Key::KEY_COMMA, true)),
        '.' => Ok((Key::KEY_DOT, false)),
        '>' => Ok((Key::KEY_DOT, true)),
        '[' => Ok((Key::KEY_LEFTBRACE, false)),
        '{' => Ok((Key::KEY_LEFTBRACE, true)),
        ']' => Ok((Key::KEY_RIGHTBRACE, false)),
        '}' => Ok((Key::KEY_RIGHTBRACE, true)),
        ';' => Ok((Key::KEY_SEMICOLON, false)),
        ':' => Ok((Key::KEY_SEMICOLON, true)),
        '\'' => Ok((Key::KEY_APOSTROPHE, false)),
        '"' => Ok((Key::KEY_APOSTROPHE, true)),
        '`' => Ok((Key::KEY_GRAVE, false)),
        '~' => Ok((Key::KEY_GRAVE, true)),
        '\\' => Ok((Key::KEY_BACKSLASH, false)),
        '|' => Ok((Key::KEY_BACKSLASH, true)),
        '/' => Ok((Key::KEY_SLASH, false)),
        '?' => Ok((Key::KEY_SLASH, true)),
        ' ' => Ok((Key::KEY_SPACE, false)),
        '\n' => Ok((Key::KEY_ENTER, false)),
        _ => Err("Invalid character".to_string().into()),
    }
}

pub fn create_device() -> Result<VirtualDevice, MainError> {
    let keys = &[
        Key::KEY_0,
        Key::KEY_1,
        Key::KEY_2,
        Key::KEY_3,
        Key::KEY_4,
        Key::KEY_5,
        Key::KEY_6,
        Key::KEY_7,
        Key::KEY_8,
        Key::KEY_9,
        Key::KEY_0,
        Key::KEY_1,
        Key::KEY_2,
        Key::KEY_3,
        Key::KEY_4,
        Key::KEY_5,
        Key::KEY_6,
        Key::KEY_7,
        Key::KEY_8,
        Key::KEY_9,
        Key::KEY_A,
        Key::KEY_B,
        Key::KEY_C,
        Key::KEY_D,
        Key::KEY_E,
        Key::KEY_F,
        Key::KEY_G,
        Key::KEY_H,
        Key::KEY_I,
        Key::KEY_J,
        Key::KEY_K,
        Key::KEY_L,
        Key::KEY_M,
        Key::KEY_N,
        Key::KEY_O,
        Key::KEY_P,
        Key::KEY_Q,
        Key::KEY_R,
        Key::KEY_S,
        Key::KEY_T,
        Key::KEY_U,
        Key::KEY_V,
        Key::KEY_W,
        Key::KEY_X,
        Key::KEY_Y,
        Key::KEY_Z,
        Key::KEY_A,
        Key::KEY_B,
        Key::KEY_C,
        Key::KEY_D,
        Key::KEY_E,
        Key::KEY_F,
        Key::KEY_G,
        Key::KEY_H,
        Key::KEY_I,
        Key::KEY_J,
        Key::KEY_K,
        Key::KEY_L,
        Key::KEY_M,
        Key::KEY_N,
        Key::KEY_O,
        Key::KEY_P,
        Key::KEY_Q,
        Key::KEY_R,
        Key::KEY_S,
        Key::KEY_T,
        Key::KEY_U,
        Key::KEY_V,
        Key::KEY_W,
        Key::KEY_X,
        Key::KEY_Y,
        Key::KEY_Z,
        Key::KEY_MINUS,
        Key::KEY_MINUS,
        Key::KEY_EQUAL,
        Key::KEY_EQUAL,
        Key::KEY_COMMA,
        Key::KEY_COMMA,
        Key::KEY_DOT,
        Key::KEY_DOT,
        Key::KEY_LEFTBRACE,
        Key::KEY_LEFTBRACE,
        Key::KEY_RIGHTBRACE,
        Key::KEY_RIGHTBRACE,
        Key::KEY_SEMICOLON,
        Key::KEY_SEMICOLON,
        Key::KEY_APOSTROPHE,
        Key::KEY_APOSTROPHE,
        Key::KEY_GRAVE,
        Key::KEY_GRAVE,
        Key::KEY_BACKSLASH,
        Key::KEY_BACKSLASH,
        Key::KEY_SLASH,
        Key::KEY_SLASH,
        Key::KEY_SPACE,
        Key::KEY_ENTER,
    ].iter().collect::<AttributeSet<_>>();

    Ok(VirtualDeviceBuilder::new()?.name("EvType virtual keyboard")
        .with_keys(&keys)?
        .build()?)
}
